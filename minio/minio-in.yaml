---
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: mi
  namespace: "minio"
  labels:
    app.kubernetes.io/instance: mi
    app.kubernetes.io/name: mi
    app.kubernetes.io/version: 2024.10.2
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: mi
      app.kubernetes.io/name: mi
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    # Allow inbound connections
    - ports:
        - port: 9001
        - port: 9000
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: mi
  namespace: "minio"
  labels:
    app.kubernetes.io/instance: mi
    app.kubernetes.io/name: mi
    app.kubernetes.io/version: 2024.10.2
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: mi
      app.kubernetes.io/name: mi
---
apiVersion: v1
kind: Service
metadata:
  name: mi-headless
  namespace: "minio"
  labels:
    app.kubernetes.io/instance: mi
    app.kubernetes.io/name: mi
    app.kubernetes.io/version: 2024.10.2
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: minio-api
      port: 9000
      targetPort: minio-api
    - name: minio-console
      port: 9001
      targetPort: minio-console
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/instance: mi
    app.kubernetes.io/name: mi
---
apiVersion: v1
kind: Service
metadata:
  name: mi
  namespace: "minio"
  labels:
    app.kubernetes.io/instance: mi
    app.kubernetes.io/name: mi
    app.kubernetes.io/version: 2024.10.2
spec:
  type: LoadBalancer
  externalTrafficPolicy: "Cluster"
  ports:
    - name: minio-api
      port: 9000
      targetPort: minio-api
    - name: minio-console
      port: 9001
      targetPort: minio-console
  selector:
    app.kubernetes.io/instance: mi
    app.kubernetes.io/name: mi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mi
  namespace: "minio"
  labels:
    app.kubernetes.io/instance: mi
    app.kubernetes.io/name: mi
    app.kubernetes.io/version: 2024.10.2
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: mi
      app.kubernetes.io/name: mi
  serviceName: mi-headless
  replicas: 2
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: mi
        app.kubernetes.io/name: mi
        app.kubernetes.io/version: 2024.10.2
      annotations:
        prometheus.io/path: /minio/v2/metrics/cluster
        prometheus.io/port: "9000"
        prometheus.io/scrape: "true"
    spec:
      
      serviceAccountName: default
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: mi
                    app.kubernetes.io/name: mi
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: minio
                    operator: In
                    values:
                      - "yes"
      automountServiceAccountToken: false
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups: []
        sysctls: []
      containers:
        - name: minio
          image: docker.io/bitnami/minio:2024.10.13-debian-12-r0
          imagePullPolicy: "Always"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MINIO_DISTRIBUTED_MODE_ENABLED
              value: "yes"
            - name: MINIO_DISTRIBUTED_NODES
              value: "mi-{0...1}.mi-headless.minio.svc.cluster.local:9000/bitnami/minio/data-{0...1}/data"
            - name: MINIO_SCHEME
              value: "http"
            - name: MINIO_FORCE_NEW_KEYS
              value: "yes"
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: mi
                  key: user
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mi
                  key: password
            - name: MINIO_SKIP_CLIENT
              value: "yes"
            - name: MINIO_BROWSER
              value: "on"
            - name: MINIO_PROMETHEUS_AUTH_TYPE
              value: "public"
            - name: MINIO_CONSOLE_PORT_NUMBER
              value: "9001"
            - name: MINIO_API_PORT_NUMBER
              value: "9000"
            - name: MINIO_DATA_DIR
              value: "/bitnami/minio/data-0"
          envFrom:
          ports:
            - name: minio-api
              containerPort: 9000
              protocol: TCP
            - name: minio-console
              containerPort: 9001
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: minio-api
              scheme: "HTTP"
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            tcpSocket:
              port: minio-api
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/minio/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /.mc
              subPath: app-mc-dir
            - name: data-0
              mountPath: /bitnami/minio/data-0
            - name: data-1
              mountPath: /bitnami/minio/data-1
            # - mountPath: /data-0
            #   name: data-0
            # - mountPath: /data-1
            #   name: data-1
      volumes:
        - name: empty-dir
          emptyDir: {}
        - hostPath:
            path: /data-0
            type: DirectoryOrCreate
          name: data-0
        - hostPath:
            path: /data-1
            type: DirectoryOrCreate
          name: data-1
        # - name: data-0
        #   emptyDir: {}
        # - name: data-1
        #   emptyDir: {}
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: mi
  namespace: "minio"
  labels:
    app.kubernetes.io/instance: mi
    app.kubernetes.io/name: mi
    app.kubernetes.io/version: 2024.10.2
spec:
  endpoints:
    - port: minio-api
      path: /minio/v2/metrics/cluster
      interval: 30s
    - port: minio-api
      path: /minio/v2/metrics/node
      interval: 30s
  namespaceSelector:
    matchNames:
      - "minio"
  selector:
    matchLabels:
      app.kubernetes.io/instance: mi
      app.kubernetes.io/name: mi
